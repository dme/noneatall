#!/usr/bin/env python
# -*- coding: utf-8 -*-
#
# noneatall - A poor web interface for notmuch.
#
# Copyright © 2010 David Edmondson
# Copyright © 2010 Alexander Botero-Lowry
#
# This program is free software: you can redistribute it and/or modify
# it under the terms of the GNU General Public License as published by
# the Free Software Foundation, either version 3 of the License, or
# (at your option) any later version.
#
# This program is distributed in the hope that it will be useful,
# but WITHOUT ANY WARRANTY; without even the implied warranty of
# MERCHANTABILITY or FITNESS FOR A PARTICULAR PURPOSE.  See the
# GNU General Public License for more details.
#
# You should have received a copy of the GNU General Public License
# along with this program.  If not, see http://www.gnu.org/licenses/ .
#
# Authors: David Edmondson <dme@dme.org>
#          Alexander Botero-Lowry <alexbl@alexbl.net>
#

from wsgiref.simple_server import make_server
import os, re
import simplejson as json
import cgi

style_all = """
<style type="text/css">
a {
	text-decoration: none;
}
</style>
"""
style_fixed = 'style="font-family: serif;"'

def threadlist(environ, start_response, d):
    res = []
    res.append(style_all)
    res.append('<table>\n')
    for l in d.splitlines():
        m = re.match('thread:([0-9A-Fa-f]*) (.*) (\[[0-9/]*\]) ([^;]*); (.*) \(([^()]*)\)$', l)
        if m:
            tid = m.group(1)
            date = m.group(2)
            count = m.group(3)
            authors = m.group(4)
            subject = m.group(5)
            tags = m.group(6)

            res.append('<tr><td>%s</td><td>%s</td><td>%s</td><td><a href="/show/thread:%s">%s</a></td><td>(%s)</td></tr>\n' % (date, count, authors[:59], tid, subject[:79], ' '.join(map(lambda s: '<a href="/search/tag:%s">%s</a>' % (s, s), tags.split()))))
        else:
            res.append('failed to parse: %s' % l)

    res.append('</table>\n')
    start_response("200 OK", [('content-type', 'text/html')])
    return res;

def messagelist(environ, start_response, d):
    res = []

    def wash(text):

        def wash_wrap(text):
            import textwrap

            r = ""
            for line in text.split('\n'):
                if len(line) > 80:
                    m = re.match('([> ]+)', line)
                    if m:
                        prefix = m.group(1)
                    else:
                        prefix = ''
                    r += textwrap.fill(line, subsequent_indent = prefix)
                else:
                    r += line
                r += '\n'
            return r

        def wash_compress_blank(text):
            regexp = re.compile('[\n]{3,}', re.MULTILINE)
            return regexp.sub('\n\n', text)
            
        return wash_compress_blank(wash_wrap(text))

    def output_body(body, depth):
        for part in body:
            try:
                hdr = '<em>Part of type %s:</em><br />\n' % part['content-type']
                pre = ''
                post = ''
                if part['content-type'].lower() == 'text/plain':
                    hdr = ''
                else:
                    bg = 255 - (depth * 8) - 4
                    pre = '<div style="padding-left: 10px; background: #%0x%0x%0x;">\n' % (bg, bg, bg)
                    post = '</div>\n'
                content = cgi.escape(wash(part['content']))
                res.append(pre)
                res.append(hdr)
                res.append('<pre %s>\n' % style_fixed)
                res.append(content)
                res.append('</pre>\n')
                res.append(post)
            except:
                res.append('<em>Part of type %s (not shown).</em><br />\n' % part['content-type'])

    def output_head(head, depth):
        bg = 255-(depth*8)
        res.append('<div style="padding-left: 10px; background: #%0x%0x%0x;">\n' % (bg, bg, bg))
        res.append('<a href="javascript:toggle(\'%s\')">%s: %s</a>\n' %
                   (head['id'], cgi.escape(head['headers']['From']), cgi.escape(head['headers']['Subject'])))
        if head['match']:
            display = 'block'
        else:
            display = 'none'
        res.append('<div id=%s style="display: %s">\n' % (head['id'], display))
        res.append('<table style="background: #%0x%0xf0;">\n' % (bg-20, bg-20))
        res.append('<tr><td>To:</td><td>%s</td></tr>\n' % (cgi.escape(head['headers']['To'])))
        res.append('<tr><td>Cc:</td><td>%s</td></tr>\n' % (cgi.escape(head['headers']['From'])))
        res.append('<tr><td>Date:</td><td>%s</td></tr>\n' % (cgi.escape(head['headers']['Date'])))
        res.append('</table>\n')
        output_body(head['body'], depth)
        res.append('</div>')

    def output_tail():
        res.append('</div>\n')

    def output_tree(tree, depth):
        (head, tail) = tree
        output_head(head, depth)
        output_thread(tail, depth + 1)
        output_tail()

    def output_thread(thread, depth):
        for tree in thread:
            output_tree(tree, depth)

    def output_forest(forest):
        for thread in forest:
            output_thread(thread, 0)

    res.append(style_all)
    res.append("""
<script language="JavaScript">
function toggle(id) {
	var e = document.getElementById(id);
	if (e.style.display == 'block') {
		e.style.display = 'none';
	} else {
		e.style.display = 'block';
	}
}
</script>
""")
    forest = json.loads(d)
    output_forest(forest)

    start_response('200 OK', [('content-type', 'text/html')]);
    return res

def application(environ, start_response):
    command = None

    args = environ['PATH_INFO'].split('/')
    if args[1] == 'search':
        command = 'search ' + '/'.join(args[2:])
        processor = threadlist
    elif args[1] == 'show':
        command = 'show --format=json ' + '/'.join(args[2:])
        processor = messagelist

    if not command:
        start_response('302 Found', [('location', '/search/tag:inbox')])
        return ''
    else:
        p = os.popen('notmuch ' + command)
        res = processor(environ, start_response, p.read())
        p.close()
        return res

def main():
    try:
        server = make_server('0.0.0.0', 10237, application);
        server.serve_forever()
    except KeyboardInterrupt:
        print 'Bye!'

if __name__ == '__main__':
    main()
